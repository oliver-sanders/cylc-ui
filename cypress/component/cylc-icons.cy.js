/**
 * Copyright (C) NIWA & British Crown (Met Office) & Contributors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import { TaskStateUserOrder, JobStates } from '@/model/TaskState.model'
import Task from '@/components/cylc/Task'
import Job from '@/components/cylc/Job'

// wrap the Task component to allow us to bump up the font-size for a
// higher resolution screenshot
const TaskComponent = {
  template: `
    <span style="font-size: 200px; margin-top: 400px">
      <task
        :status="status"
        :startTime="startTime"
        :estimatedDuration="100"
        :isHeld="isHeld"
        :isQueued="isQueued"
        :isRunahead="isRunahead"
      />
    </span>
  `,
  props: ['status', 'isHeld', 'isQueued', 'isRunahead'],
  components: { Task },
  data: () => ({
    // set the progress indicator for running tasks to ~33%
    // 33% of the 100s duration in milliseconds (0.33 * 100s * 1000ms/s)
    startTime: new Date(Date.now() - 33333).toISOString()
  })
}

// wrap the Job component to allow us to bump up the font-size for a
// higher resolution screenshot
const JobComponent = {
  template: `
    <span style="font-size: 200px" id="app" class="job_theme--default">
      <job :status="status" />
    </span>
  `,
  props: ['status'],
  components: { Job }
}

describe('cylc icons', () => {
  /* NOTE: The screenshots generated by these tests are used in cylc-doc. */
  describe('task', () => {
    it('renders for each task state', () => {
      for (const state of TaskStateUserOrder) {
        cy.mount(TaskComponent, { propsData: { status: state.name } })
        cy.get('.c-task svg.task').last().screenshot(
          `task-${state.name}`,
          { overwrite: true, disableTimersAndAnimations: false }
        )
      }
    })

    it.only('renders for each modifier', () => {
      for (const modifier of ['isHeld', 'isQueued', 'isRunahead']) {
        const propsData = {}
        propsData.status = 'waiting'
        propsData[modifier] = true
        cy.mount(TaskComponent, { propsData })
        cy.get('.c-task svg.task').last().screenshot(
          `task-${modifier}`,
          { overwrite: true }
        )
      }
    })
  })

  describe('job', () => {
    it('renders for each job state', () => {
      for (const state of JobStates) {
        cy.mount(JobComponent, { propsData: { status: state.name } })
        cy.get('.c-job svg').last().screenshot(
          `job-${state.name}`,
          { overwrite: true }
        )
      }
    })
  })
})
